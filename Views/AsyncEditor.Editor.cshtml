@using Orchard.ContentManagement
@using Lombiq.ContentEditors.Models
@using Orchard.Utility.Extensions

@{
    var contentItem = Model.ContentItem as ContentItem;
    var asyncEditorPart = contentItem?.As<AsyncEditorPart>();
    var editorShape = Model.EditorShape;

    if (editorShape == null || !(asyncEditorPart?.IsAsyncEditorContext ?? false))
    {
        return;
    }

    var contentCreated = Model.ContentCreated as bool? ?? false;
    var contentItemId = contentCreated ? contentItem.Id : 0;
    var group = asyncEditorPart.CurrentEditorGroup?.Name ?? "";
    var contentType = contentItem.ContentType;

    const string BlockName = "asyncEditor";
    const string FormElementName = BlockName + "__form";
}


<div class="@BlockName @if (!string.IsNullOrEmpty(group)) { <text> @(BlockName)_group_@(group.HtmlClassify()) </text> }">
    @using (Html.BeginFormAntiForgeryPost(
        Url.Action(
            "Edit",
            "AsyncEditor",
            new { Area = "Lombiq.ContentEditors", ContentItemId = contentItemId, Group = group, ContentType = contentType }),
        FormMethod.Post,
        new { @class = string.Join(" ", FormElementName, "js-" + FormElementName) }))
    {
        @Display.AsyncEditor_Title(ContentItem: contentItem)

        <div class="@(BlockName)__validationSummary">
            @Display(Model.ValidationSummaryShape)
        </div>

        @Display(editorShape)

        <div class="@(BlockName)__actions">
            @Display.AsyncEditor_Actions(ContentItem: contentItem)
        </div>
    }
</div>
