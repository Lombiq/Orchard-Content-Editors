@using Orchard.ContentManagement
@using Lombiq.ContentEditors.Constants
@using Lombiq.ContentEditors.Models

@{
    var contentItem = Model.ContentItem as ContentItem;
    var asyncEditorPart = contentItem?.As<AsyncEditorPart>();

    if (asyncEditorPart == null)
    {
        return;
    }

    // Default group can be given as a shape parameter or it can be the next accessible editor group.
    // If the <ContentType>EditorGroup query string parameter is given then the value of it is stronger.
    var defaultGroup = (Model.EditorGroup as string) ?? asyncEditorPart.NextEditableAuthorizedGroup?.Name;

    Script.Require(ResourceNames.Lombiq_AsyncEditor).AtHead();

    var editUrl = Model.EditUrl ?? Url.Action("Edit", "AsyncEditor", new { Area = "Lombiq.ContentEditors" });

    string AsyncEditorLoaderId = Html.AsyncEditorPluginId(contentItem);
}

@Display.Lombiq_AsyncEditorLoader_Container(AsyncEditorLoaderId: AsyncEditorLoaderId)


<script type="text/javascript">
    ; (function ($) {
        $(function () {
            $("#@AsyncEditorLoaderId").lombiq_AsyncEditor({
                asyncEditorApiUrl: "@editUrl",
                contentType: "@contentItem.ContentType",
                initialContentItemId: @contentItem.Id,
                defaultEditorGroupName: "@defaultGroup",
                asyncEditorLoaderElementClass: ".js-@ElementNames.AsyncEditorLoader.BlockName",
                processingIndicatorElementClass: ".js-@ElementNames.AsyncEditorLoader.ProcessingIndicatorElementName",
                editorPlaceholderElementClass: ".js-@ElementNames.AsyncEditorLoader.EditorPlaceholderElementName",
                loadEditorActionElementClass: ".js-@ElementNames.AsyncEditorActions.LoadEditorElementName",
                postEditorActionElementClass: ".js-@ElementNames.AsyncEditorActions.PostEditorElementName"
            });
        });
    })(jQuery);
</script>