@using Lombiq.ContentEditors.ViewModels

@{
    var viewModel = Model.ViewModel as EditorViewModel;
    var value = (viewModel.Value as bool?) ?? false;

    const string DefaultBlockName = "BoolEditor";
    string BlockName = viewModel.BlockName ?? DefaultBlockName;

    var boolAttributes = viewModel.BuildAttributes(new Dictionary<string, object>
    {
        { "class", "form-control textbox " + DefaultBlockName + "__checkbox" }
    });

    var labelAttributes = new Dictionary<string, object>
    {
        { "class", "editorLabel " + DefaultBlockName + "__label" }
    };

    if (viewModel.Required)
    {
        boolAttributes["required"] = true;
        boolAttributes["class"] = boolAttributes["class"] + " required";
        labelAttributes["class"] = labelAttributes["class"] + " required";
    }

    if (!string.IsNullOrEmpty(viewModel.Placeholder))
    {
        boolAttributes["placeholder"] = viewModel.Placeholder;
    }
   
    var yesBool = boolAttributes.ToDictionary(k => k.Key, k => k.Value);
    yesBool["id"] = BlockName + "__yes";
}

<div class="editor editorField form-group @DefaultBlockName @BlockName">
    @if (!string.IsNullOrEmpty(viewModel.Label))
    {
        @Html.Label(viewModel.Name, viewModel.Label, labelAttributes)
    }

    <label>
        @Html.RadioButton(viewModel.Name, value, value, yesBool) @T("Yes")
    </label>

    <label>
        @Html.RadioButton(viewModel.Name, !value, !value, boolAttributes) @T("No")
    </label>
    @if (!string.IsNullOrEmpty(viewModel.Hint))
    {
        <div class="editorHint @(DefaultBlockName)__editorHint">@viewModel.Hint</div>
    }
</div>

<script type="text/javascript">
    ; (function ($) {
        $(function () {
            $("input[name='@viewModel.Name']").on("click", function (event) {
                var boolEditorValue = $("#BoolEditor__yes").is(":checked");
                debugger;

                $this.trigger("StateChanged", [boolEditorValue])
               // OnBoolEditorStateChanged(boolEditorValue);
            });

            @*function OnBoolEditorStateChanged(state) {
                var evt = $.Event('@(viewModel.Name)StateChanged');
                evt.state = state;

                $(window).trigger(evt);
            }*@
        });
    })(jQuery);
</script>