@using Lombiq.ContentEditors.ViewModels
@using Lombiq.ContentEditors.Constants
@using Orchard.Localization.Services
@using Orchard.Localization.Models
@using Orchard.Utility.Extensions

@{
    Style.Require(ResourceNames.jQueryUI);

    Script.Require(ResourceNames.jQueryUI).AtHead();

    var viewModel = Model.ViewModel as DateTimeEditorViewModel;

    if (viewModel.EditorType == DateTimeEditorType.Time)
    {
        Script.Require(ResourceNames.jQueryTimeEntry).AtHead();
    }

    var isDateEditor = viewModel.EditorType == DateTimeEditorType.Date ||
        viewModel.EditorType == DateTimeEditorType.DateWithTimeZoneConversion;

    var classifiedName = $"{Html.NameForModel()}-{viewModel.Name}".HtmlClassify();
    var hiddenFieldClassName = "js-" + classifiedName + "-value";
    var editorType = isDateEditor ? "text" : "time";

    string DefaultBlockName = "dateTimeEditor";
    string BlockName = viewModel.BlockName ?? DefaultBlockName;
    string DateTimePickerContainerElementName = DefaultBlockName + "__dateTimePickerContainer";
    string GlyphiconElementName = DefaultBlockName + "__glyphicon";

    var editorTypeClass = isDateEditor ? "datePicker" : "timePicker";

    var dateTimePickerAttributes = viewModel.BuildAttributes(new Dictionary<string, object>
    {
        { "type", editorType },
        { "class", $"form-control {editorTypeClass} {DefaultBlockName}__{editorTypeClass} {classifiedName}" }
    });

    var labelAttributes = new Dictionary<string, object>
    {
        { "class", "editorLabel " + DefaultBlockName + "__label" }
    };

    if (viewModel.Required)
    {
        dateTimePickerAttributes["required"] = true;
        dateTimePickerAttributes["class"] = dateTimePickerAttributes["class"] + " required";
        labelAttributes["class"] = labelAttributes["class"] + " required";
    }

    if (!string.IsNullOrEmpty(viewModel.Placeholder))
    {
        dateTimePickerAttributes["placeholder"] = viewModel.Placeholder;
    }

    var dateLocalizationServices = WorkContext.Resolve<IDateLocalizationServices>();
    var options = new DateLocalizationOptions
    {
        EnableTimeZoneConversion = viewModel.EditorType == DateTimeEditorType.Time ||
            viewModel.EditorType == DateTimeEditorType.DateWithTimeZoneConversion,
        EnableCalendarConversion = viewModel.EditorType == DateTimeEditorType.Date,
        IgnoreDate = viewModel.EditorType == DateTimeEditorType.Time
    };

    var displayFormat = isDateEditor ? viewModel.DateDisplayFormat : "HH:mm";
    var dateTimeString = viewModel.Value as string;
    if (viewModel.Value is DateTime?)
    {
        var value = viewModel.Value as DateTime?;
        dateTimeString = value.HasValue && value.Value != default(DateTime) ?
            viewModel.Value is string ?
                (string)viewModel.Value :
                dateLocalizationServices.ConvertToLocalizedString(value, T("yyyy-MM-dd").Text, options) :
            "";
    }

    var datePickerElement = new TagBuilder("input");
    foreach (var attribute in dateTimePickerAttributes)
    {
        datePickerElement.Attributes.Add(attribute.Key, attribute.Value.ToString());
    }
    datePickerElement.Attributes.Add("value", dateTimeString);
}

<div class="editor editorField form-group @DefaultBlockName @BlockName">
    @if (!string.IsNullOrEmpty(viewModel.Label))
    {
        @Html.Label(viewModel.Name, viewModel.Label, labelAttributes)
    }

    <div class="@DateTimePickerContainerElementName">
        @Html.Raw(datePickerElement.ToString(TagRenderMode.SelfClosing))
        @Html.Hidden(viewModel.Name, dateTimeString, new { @class = hiddenFieldClassName })
    </div>
</div>

@if (editorType == "text")
{
    <script type="text/javascript">
        ; (function ($) {
            $(function () {
                var $datepicker = $(".@classifiedName");
                var $hiddenfield = $(".@hiddenFieldClassName");
                $datepicker.datepicker({
                    dateFormat: "@displayFormat",
                    onSelect: function () {
                        var selectedDate = $(this).datepicker("getDate");
                        selectedDate.setMinutes(selectedDate.getMinutes() - selectedDate.getTimezoneOffset());
                        $hiddenfield.val(selectedDate.toISOString().split("T")[0]);
                    }
                });

                @if (!string.IsNullOrEmpty(dateTimeString))
                { 
                    @:$datepicker.datepicker("setDate", new Date("@dateTimeString"));
                }
                
                $(".ui-datepicker").hide();
            });
        })(jQuery);
    </script>
}