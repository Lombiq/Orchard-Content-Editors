@using Orchard.ContentManagement
@using Lombiq.EditorGroups.Constants
@using Lombiq.EditorGroups.Models

@{
    var contentItem = Model.ContentItem as ContentItem;
    var asyncEditorPart = contentItem?.As<AsyncEditorPart>();

    if (!(asyncEditorPart?.AsyncEditorContext ?? false))
    {
        return;
    }

    const string BlockName = "asyncEditorActions";
    const string GroupListElementName = BlockName + "__groupList";
    const string GroupListItemElementName = BlockName + "__groupListItem";
    const string GroupNameElementName = BlockName + "__groupName";
    const string GroupNameElementNameWithCurrentModifier = GroupNameElementName + "_current";
    const string GroupNameElementNameWithCompleteModifier = GroupNameElementName + "_complete";
    const string GroupNameElementNameWithIncompleteModifier = GroupNameElementName + "_incomplete";
    const string NavigationButtonsElementName = BlockName + "__navigationButtons";
    const string SaveButtonElementName = BlockName + "__saveButton";
    const string PublishButtonElementName = BlockName + "__publishButton";
    const string NextButtonElementName = BlockName + "__nextButton";
    const string PreviousButtonElementName = BlockName + "__previousButton";
}

<div class="@BlockName">
    @if (asyncEditorPart.PreviousEditorGroup != null)
    {
        <div class="btn button @PreviousButtonElementName js-@ElementNames.AsyncEditorActions.LoadEditorElementName"
             data-editorGroupName="@asyncEditorPart.PreviousEditorGroup.Name">
            @T("Back")
        </div>
    }
    <ol class="@GroupListElementName">
        @foreach (var editorGroup in asyncEditorPart.AuthorizedEditorGroups)
        {
            <li class="@GroupListItemElementName">
                @if (editorGroup == asyncEditorPart.CurrentEditorGroup)
                {
                    <div class="@GroupNameElementName @GroupNameElementNameWithCurrentModifier">
                        @editorGroup.Title
                    </div>
                }
                else if (!asyncEditorPart.CompleteEditorGroupNames.Contains(editorGroup.Name))
                {
                    <div class="@GroupNameElementName @GroupNameElementNameWithIncompleteModifier">
                        @editorGroup.Title
                    </div>
                }
                else
                {
                    <div class="@GroupNameElementName @GroupNameElementNameWithCompleteModifier js-@ElementNames.AsyncEditorActions.LoadEditorElementName"
                         data-editorGroupName="@editorGroup.Name">
                        @editorGroup.Title
                    </div>
                }
            </li>
        }
    </ol>
    <div class="@NavigationButtonsElementName">
        @if (asyncEditorPart.CurrentEditorGroup.PublishGroup)
        {
            <input type="submit" name="submit.SaveAndNext" class="btn button @PublishButtonElementName" value="@T("Publish")" />
        }
        else
        {
            <input type="submit" name="submit.Save" class="btn button @SaveButtonElementName" value="@T("Save")" />
        }
        
        @if (asyncEditorPart.NextEditorGroup != null)
        {
            <input type="submit" name="submit.SaveAndNext" class="btn button @NextButtonElementName" value="@T("Next")" />
        }
    </div>
</div>