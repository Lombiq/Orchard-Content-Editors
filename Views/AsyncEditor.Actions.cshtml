@using Orchard.ContentManagement
@using Orchard.Core.Contents.Settings
@using Lombiq.EditorGroups.Constants
@using Lombiq.EditorGroups.Models
@using Lombiq.EditorGroups.Services

@{
    var contentItem = Model.ContentItem as ContentItem;
    var asyncEditorPart = contentItem?.As<AsyncEditorPart>();

    if (!(asyncEditorPart?.IsAsyncEditorContext ?? false))
    {
        return;
    }

    var asyncEditorService = WorkContext.Resolve<IAsyncEditorService>();

    const string BlockName = "asyncEditorActions";
    const string GroupListElementName = BlockName + "__groupList";
    const string GroupListItemElementName = BlockName + "__groupListItem";
    const string GroupNameElementName = BlockName + "__groupName";
    const string GroupNameElementNameWithCurrentModifier = GroupNameElementName + "_current";
    const string GroupNameElementNameWithCompletedModifier = GroupNameElementName + "_completed";
    const string NavigationButtonsElementName = BlockName + "__navigationButtons";
    const string SaveButtonElementName = BlockName + "__saveButton";
    const string PublishButtonElementName = BlockName + "__publishButton";
    const string NextButtonElementName = BlockName + "__nextButton";
    const string PreviousButtonElementName = BlockName + "__previousButton";
}

<div class="@BlockName">
    @if (asyncEditorPart.PreviousAuthorizedEditorGroup != null)
    {
        <div class="btn button @PreviousButtonElementName js-@ElementNames.AsyncEditorActions.LoadEditorElementName"
             data-editorGroupName="@asyncEditorPart.PreviousAuthorizedEditorGroup.Name">
            @T("Back")
        </div>
    }
    <ol class="@GroupListElementName">
        @foreach (var editorGroup in asyncEditorPart.AuthorizedEditorGroups)
        {
            <li class="@GroupListItemElementName">
                @{ 
                    var groupElementBuilder = new TagBuilder("div");
                    groupElementBuilder.AddCssClass(GroupNameElementName);
                    groupElementBuilder.InnerHtml = editorGroup.Title;

                    var isCurrent = asyncEditorPart.CurrentEditorGroup.Equals(editorGroup);
                    if (isCurrent)
                    {
                        groupElementBuilder.AddCssClass(GroupNameElementNameWithCurrentModifier);
                    }

                    if (asyncEditorPart.CompletedAuthorizedEditorGroups.Contains(editorGroup))
                    {
                        groupElementBuilder.AddCssClass(GroupNameElementNameWithCompletedModifier);
                    }

                    if (!isCurrent && asyncEditorPart.AvailableAuthorizedEditorGroups.Contains(editorGroup))
                    {
                        groupElementBuilder.AddCssClass("js-" + ElementNames.AsyncEditorActions.LoadEditorElementName);
                        groupElementBuilder.Attributes.Add("data-editorGroupName", editorGroup.Name);
                    }
                }

                @Html.Raw(groupElementBuilder.ToString(TagRenderMode.Normal))
            </li>
        }
    </ol>
    <div class="@NavigationButtonsElementName">
        <input type="submit" name="submit.Save" class="btn button @SaveButtonElementName" value="@T("Save Draft")" />

        @if ((asyncEditorPart.CurrentEditorGroup?.IsPublishGroup ?? true) && 
            asyncEditorPart.TypeDefinition.Settings.GetModel<ContentTypeSettings>().Draftable &&
            asyncEditorService.IsAuthorizedToPublish(asyncEditorPart, asyncEditorPart.CurrentEditorGroup?.Name ?? ""))
        {
            <input type="submit" name="submit.Publish" class="btn button @PublishButtonElementName" value="@T("Publish")" />
        }
        
        @if (asyncEditorPart.NextAuthorizedEditorGroup != null)
        {
            <input type="submit" name="submit.SaveAndNext" class="btn button @NextButtonElementName" value="@T("Save and Next")" />
        }
    </div>
</div>