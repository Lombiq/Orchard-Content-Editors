@{
    var viewModel = Model.ViewModel as Lombiq.ContentEditors.ViewModels.TaxonomyFieldViewModel;

    if ((viewModel == null || viewModel.Terms == null || !viewModel.Terms.Any()) && !viewModel.ShowIfEmpty)
    {
        return;
    }

    string BlockName = viewModel.BlockName ?? "taxonomyField";
    string LabelElementName = BlockName + "__label";
    string ValueElementName = BlockName + "__value";
    string ValueElementNameWithEmptyModifier = ValueElementName + "_empty";
    string ListElementName = BlockName + "__list";
    string ListItemElementName = BlockName + "__listItem";

    //viewModel.Terms = TermPart.Sort(viewModel.Terms);
}

<div class="@BlockName @viewModel.AdditionalClasses">
    @if (!string.IsNullOrEmpty(viewModel.Label))
    {
        <div class="@LabelElementName">@viewModel.Label:</div>
    }
    <div class="@ValueElementName @(!viewModel.Terms.Any() ? ValueElementNameWithEmptyModifier : "")">
        @if(viewModel != null && viewModel.Terms != null)
        {
            var termDisplayValues = viewModel.IsLink ?
                viewModel.Terms.Select(t => Html.ItemDisplayLink(t.Name, t.ContentItem).ToString()).ToArray() :
                viewModel.Terms.Select(term => term.Name);

            switch (viewModel.DisplayFlavor)
            {
                case Lombiq.ContentEditors.ViewModels.TaxonomyFieldDisplayFlavor.Join:
                    @(new HtmlString(string.Join(", ", termDisplayValues)))

                    break;
                case Lombiq.ContentEditors.ViewModels.TaxonomyFieldDisplayFlavor.List:
                    <ul class="@ListElementName">
                        @foreach (var value in termDisplayValues)
                        {
                            <li class="@ListItemElementName">@value</li>
                        }
                    </ul>

                    break;
            }
        }
    </div>
</div>
