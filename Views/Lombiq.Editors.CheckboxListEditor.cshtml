@using Lombiq.ContentEditors.Constants
@using Lombiq.ContentEditors.ViewModels

@{
    var viewModel = Model.ViewModel as SingleChoiceEditorViewModel;

    var options = viewModel.Options.ToList();
    var allowMultipleChoices = viewModel.AllowMultipleChoices;
    var values = allowMultipleChoices ?
        ((string)viewModel.Value).Split(new[] { viewModel.MultipleChoiceSeparator }, StringSplitOptions.RemoveEmptyEntries) :
        null;
    var hasOtherOption = !string.IsNullOrEmpty(viewModel.OtherName);
    var isOtherSelected = hasOtherOption &&
        (allowMultipleChoices ?
            (values.LastOrDefault() == options.LastOrDefault()) :
            ((viewModel.Value as string) == options.LastOrDefault()));

    Script.Require(ResourceNames.jQuery).AtHead();

    const string DefaultBlockName = "singleChoiceEditor";
    string BlockName = viewModel.BlockName ?? DefaultBlockName;
    var CheckBoxesListElementName = DefaultBlockName + "__list";
    var CheckBoxesListItemElementName = DefaultBlockName + "__listItem";
    var CheckBoxElementName = DefaultBlockName + "__checkbox";
    var CheckboxTextLabel = DefaultBlockName + "__textLabel";
    var CheckboxIndicator = DefaultBlockName + "__indicator";
    var OtherCheckBoxElementName = DefaultBlockName + "__otherCheckbox";
    var OtherEditorElementName = DefaultBlockName + "__otherEditor";
    var OtherTextboxElementName = DefaultBlockName + "__otherTextbox";

    var uniqueCheckbBoxElementName = "js-" + CheckBoxElementName + "-" + Html.ClassifiedName(viewModel.Name);

    var labelAttributes = new Dictionary<string, object>
    {
        { "class", "editorLabel " + DefaultBlockName + "__label" }
    };

    if (viewModel.Required)
    {
        labelAttributes["class"] = labelAttributes["class"] + " required";
    }

    var otherTextboxAttributes = hasOtherOption ? new Dictionary<string, object>
    {
        {"class", "form-control textbox " + OtherTextboxElementName }
    } : null;

    if (hasOtherOption && isOtherSelected)
    {
        otherTextboxAttributes.Add("required", "");
    }
}

<div class="editor editorField form-group @DefaultBlockName @BlockName">
    @if (!string.IsNullOrEmpty(viewModel.Label))
    {
        @Html.Label(viewModel.Label, labelAttributes)
    }

    @if (!string.IsNullOrEmpty(viewModel.Hint))
    {
        <div class="editorHint @(DefaultBlockName)__editorHint">@viewModel.Hint</div>
    }

    <div class="@CheckBoxesListElementName">
        @Html.Hidden(viewModel.Name, viewModel.Value, new { required = "" })

        @for (int i = 0; i < options.Count; i++)
        {
            var option = options[i];
            var name = viewModel.Name + ".Option" + i;
            var id = Html.Id(name);
            var isLast = i == options.Count - 1;
            var isChecked = allowMultipleChoices ? values.Contains(option) : (option == (string)viewModel.Value);

            <div class="@CheckBoxesListItemElementName">
                <label class="forcheckbox @CheckboxTextLabel" for="@id">
                    <input class="@CheckBoxElementName @uniqueCheckbBoxElementName @(isLast ? OtherCheckBoxElementName : "")" type="checkbox" value="@option" @if (isChecked) { <text> checked="checked" </text> } name="@name" id="@id" />

                    @option

                    <span class="@CheckboxIndicator"></span>
                </label>
            </div>
        }

        @if (hasOtherOption)
        {
            <div class="@OtherEditorElementName" @(isOtherSelected ? "" : "hidden")>
                @Html.TextBox(viewModel.OtherName, viewModel.OtherValue, otherTextboxAttributes)
            </div>
        }
    </div>
</div>

<script type="text/javascript">
    ; (function ($) {
        $(function () {
            $(".@uniqueCheckbBoxElementName").click(function () {
                var checkbox = this;
                var $this = $(checkbox);
                var $block = $this.parents().eq(3);
                var $storedValue = $("#@Html.Id(viewModel.Name)");
                @* Trying to match the current field editor as much as possible,
                   so that we don't interfere with other ones,
                   but that requires the BlockName to be defined. *@
                if (!$block.hasClass("@BlockName")) return;

                @if (allowMultipleChoices)
                {
                    <text>
                        var values = [];
                        $block.find(".@CheckBoxElementName:checked").each(function () {
                            values.push($(this).val());
                        });
                        $storedValue.val(values.join());
                    </text>
                }
                else
                {
                    <text>
                        $storedValue.val($this.prop("checked") ? $this.val() : "");
                        $this.parent().parent().siblings().find(".@CheckBoxElementName").prop("checked", false);
                    </text>
                }

                @if (hasOtherOption)
                {
                    <text>
                        var $otherEditor = $block.find(".@OtherEditorElementName");
                        var $otherTextbox = $otherEditor.find(".@OtherTextboxElementName");
                        var $otherCheckbox = $block.find(".@OtherCheckBoxElementName");
                        if ($otherCheckbox.is(":checked")) {
                            $otherEditor.show("slow");
                            $otherTextbox.attr("required", "");
                        }
                        else {
                            $otherEditor.hide("slow");
                            $otherTextbox.removeAttr("required");
                        }
                    </text>
                }
            });
        });
    })(jQuery);
</script>