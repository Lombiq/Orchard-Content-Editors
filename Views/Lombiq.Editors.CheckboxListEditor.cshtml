@using Lombiq.ContentEditors.Constants
@using Lombiq.ContentEditors.ViewModels

@{
    var viewModel = Model.ViewModel as CheckboxListEditorViewModel;

    if (!viewModel.ShowIfEmpty && (!viewModel?.Items?.Any() ?? true)) { return; }

    Script.Require(ResourceNames.Lombiq_CheckboxListEditor);

    var hasParent = !string.IsNullOrEmpty(viewModel.ParentElementSelector);

    if (hasParent)
    {
        Script.Require(ResourceNames.Lombiq_ConnectedValueSelector);
    }

    const string CheckboxListEditorDefaultBlockName = "checkboxListEditor";
    var CheckboxListEditorBlockName = viewModel.BlockName ?? CheckboxListEditorDefaultBlockName;
    var TechnicalNameBlockName = viewModel.TechnicalName;

    var FilterRelationshipTechnicalName = $"{TechnicalNameBlockName}Relationship";
    var FilterRelationshipsContainerElementName = CheckboxListEditorBlockName + "__filterRelationshipsContainer";
    var FilterRelationshipContainerElementName = CheckboxListEditorBlockName + "__filterRelationshipContainer";
    var FilterRelationshipElementName = CheckboxListEditorBlockName + "__filterRelationship";
    var FilterRelationshipLabelElementName = CheckboxListEditorBlockName + "__filterRelationshipLabel";
    var selectedFilterRelationship = Enum.TryParse(Request.QueryString[FilterRelationshipTechnicalName], out FilterRelationship filterRelationship) ?
        filterRelationship : FilterRelationship.Or;

    var LabelElementName = CheckboxListEditorBlockName + "__label";
    var TechnicalLabelElementName = TechnicalNameBlockName + "__label";
    var ExpandableLabelElementName = LabelElementName + "__expandable";
    var ExpandableLabelElementNameWithOpenedModifier = ExpandableLabelElementName + "_open";
    var ExpandableContainerElementName = CheckboxListEditorBlockName + "__expandableContainer";
    var TechnicalExpandableContainerElementName = TechnicalNameBlockName + "__expandableContainer";
    var ExpandableContainerElementNameWithOpenedModifier = ExpandableContainerElementName + "_open";
    var ControlGroupElementName = CheckboxListEditorBlockName + "__controlGroup";

    var FilterContainerElementName = CheckboxListEditorBlockName + "__filterContainer";
    var FilterTextElementName = CheckboxListEditorBlockName + "__filterText";

    var CheckboxItemElementName = CheckboxListEditorBlockName + "__item";
    var CheckboxSelectAllItemElementName = CheckboxListEditorBlockName + "__selectAllItem";


    const string CheckboxContainerBlockName = "checkboxContainer";
    const string SelectAllElementName = CheckboxContainerBlockName + "__selectAllElementName";
    const string CheckboxLabelElementName = CheckboxContainerBlockName + "__label";
    const string CheckboxInputElementName = CheckboxContainerBlockName + "__input";
    const string CheckboxIndicatorElementName = CheckboxContainerBlockName + "__indicator";

    var expandableContainerDiv = Tag(Model, "div");
    expandableContainerDiv.AddCssClass(ExpandableContainerElementName);
    expandableContainerDiv.AddCssClass($"js-{TechnicalExpandableContainerElementName}");

    if (!viewModel.IsCollapsedByDefault)
    {
        expandableContainerDiv.AddCssClass(ExpandableContainerElementNameWithOpenedModifier);
    }

    var labelClasses = LabelElementName;
    if (viewModel.IsExpandable)
    {
        labelClasses += $" {ExpandableLabelElementName} js-{TechnicalLabelElementName}";
        if (!(viewModel.IsCollapsedByDefault))
        {
            labelClasses += $" {ExpandableLabelElementNameWithOpenedModifier}";
        }
    }
}

@Display.Lombiq_Editors_CheckboxListEditor_Resources()

<div id="@TechnicalNameBlockName" class="@CheckboxListEditorBlockName @TechnicalNameBlockName @viewModel.AdditionalClasses @if (CheckboxListEditorBlockName != CheckboxListEditorDefaultBlockName) { <text>@CheckboxListEditorDefaultBlockName</text> }">
    @if (!string.IsNullOrEmpty(viewModel.Label))
    {
        <div class="@labelClasses">@viewModel.Label</div>
    }

    @if (viewModel.IsExpandable)
    {
        @expandableContainerDiv.StartElement
    }
    @if (viewModel.IsFilterRelationShipSelectorEnabled && viewModel.EnabledFilterRelationShips.Any())
    {
        <div class="@FilterRelationshipsContainerElementName">
            @foreach (var relationship in viewModel.EnabledFilterRelationShips)
            {
                <div class="@FilterRelationshipContainerElementName">
                    <input @if (relationship == selectedFilterRelationship) { <text>checked</text> }
                        type="radio" id="@(FilterRelationshipTechnicalName)_@(relationship)"
                        name="@FilterRelationshipTechnicalName" class="@FilterRelationshipElementName"
                        value="@if (relationship != FilterRelationship.Or) { @relationship }" />
                    <label for="@(FilterRelationshipTechnicalName)_@(relationship)" class="@FilterRelationshipLabelElementName">@relationship</label>
                </div>
            }
        </div>
    }
    @if (viewModel.IsSearchEnabled)
    {
        <div class="@FilterContainerElementName js-@FilterContainerElementName">
            <input type="search" class="@FilterTextElementName js-@FilterTextElementName" />
        </div>
    }
    <div class="@ControlGroupElementName js-@ControlGroupElementName">
        @if (viewModel.EnableSelectAll && viewModel.Items.Skip(1).Any())
        {
            <label class="@CheckboxItemElementName @CheckboxContainerBlockName @CheckboxLabelElementName @CheckboxSelectAllItemElementName js-@SelectAllElementName">
                @T("Select All")
                <input type="checkbox" class="@CheckboxInputElementName @SelectAllElementName" checked="@viewModel.Items.All(item => item.Checked)" hidden />
                <span class="@CheckboxIndicatorElementName"></span>
            </label>
        }

        @foreach (var item in viewModel.Items)
        {
            <label class="@CheckboxItemElementName @CheckboxContainerBlockName @CheckboxLabelElementName js-@CheckboxContainerBlockName">
                @item.Label
                <input type="checkbox" class="js-@CheckboxInputElementName @CheckboxInputElementName" name="@TechnicalNameBlockName"
                       value="@item.Value" @if (item.Checked) { <text>checked</text> } hidden />
                <span class="@CheckboxIndicatorElementName"></span>
            </label>
        }
    </div>
    @if (viewModel.IsExpandable)
    {
        @expandableContainerDiv.EndElement
    }
</div>

@using (Script.Foot())
{
    <script type="text/javascript">
        ; (function ($) {
            $(function () {
                $("#@TechnicalNameBlockName").lombiq_CheckboxListEditor({
                    @if (viewModel.IsSearchEnabled)
                    {
                        <text>searchFilterElementClass: ".js-@FilterTextElementName",
                        searchFilterContainerElementClass: ".js-@FilterContainerElementName",</text>
                    }
                    controlGroupElementClass: ".js-@ControlGroupElementName",
                    checkboxContainerSelector: ".js-@CheckboxContainerBlockName",
                    checkboxInputElementClass: ".js-@CheckboxInputElementName",
                    inputCheckboxInputElementSelector: "input.@CheckboxInputElementName",
                    checkboxSelectAllItemElementClass: ".@CheckboxSelectAllItemElementName",
                    selectAllElementClass: ".@SelectAllElementName",
                    inputSelectAllElementSelector: "input.@SelectAllElementName",
                    checkboxItemElementClass: ".@CheckboxItemElementName"
                });

                @if (viewModel.IsExpandable)
                {
                    <text>
                        $(".js-@TechnicalLabelElementName").click(function (e) {
                            $(this).toggleClass("@ExpandableLabelElementNameWithOpenedModifier");
                            $(this).next(".js-@TechnicalExpandableContainerElementName").slideToggle("fast").toggleClass("@ExpandableContainerElementNameWithOpenedModifier");
                        });
                    </text>
                }

                @if (hasParent)
                {
                    <text>
                        $("#@TechnicalNameBlockName").lombiq_ConnectedValueSelector({
                            parentElementSelector: "@viewModel.ParentElementSelector",
                            valueHierarchy: @Html.Raw(Json.Encode(viewModel.ParentElementValueHierarchy)),
                            childElementValueSelector: ".@CheckboxItemElementName"
                        });
                    </text>
                }
            });
        })(jQuery);
    </script>
}