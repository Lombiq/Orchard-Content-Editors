@using Lombiq.ContentEditors.Constants
@using Lombiq.ContentEditors.ViewModels

@{
    var viewModel = Model.ViewModel as DropdownEditorViewModel;

    var hasParent = !string.IsNullOrEmpty(viewModel.ParentElementSelector);

    if (hasParent)
    {
        Script.Require(ResourceNames.Lombiq_ConnectedValueSelector);
    }

    const string DefaultBlockName = "dropdownEditor";
    string BlockName = viewModel.BlockName ?? DefaultBlockName;

    var dropdownAttributes = viewModel.BuildAttributes(new Dictionary<string, object>
    {
        { "class", "form-control dropdown " + DefaultBlockName + "__dropdown" }
    });

    var labelAttributes = new Dictionary<string, object>
    {
        { "class", "editorLabel " + DefaultBlockName + "__label" }
    };

    if (viewModel.Required)
    {
        dropdownAttributes["required"] = true;
        dropdownAttributes["class"] = dropdownAttributes["class"] + " required";
        labelAttributes["class"] = labelAttributes["class"] + " required";
    }

    if (viewModel.Disabled)
    {
        dropdownAttributes["disabled"] = "disabled";
    }

    if (!string.IsNullOrEmpty(viewModel.Placeholder))
    {
        dropdownAttributes["placeholder"] = viewModel.Placeholder;
    }

    if (viewModel.Value != null && !viewModel.SelectList.Any(item => item.Selected))
    {
        var valueString = viewModel.Value as string;
        var selectedItem = viewModel.SelectList.FirstOrDefault(item => item.Value == valueString);

        if (selectedItem != null)
        {
            selectedItem.Selected = true;
        }
    }

    viewModel.SortSelectListByText();

    if (viewModel.HasDefaultEmptyValue)
    {
        viewModel.SelectList.Insert(0, new SelectListItem
        {
            Text = viewModel.EmptyValueText,
            Value = viewModel.DefaultEmptyValue,
            Selected = !viewModel.SelectList.Any(selectListItem => selectListItem.Selected)
        });
    }
}

<div class="editor editorField form-group @DefaultBlockName @BlockName">
    @if (!string.IsNullOrEmpty(viewModel.Label))
    {
        @Html.Label(viewModel.Label, labelAttributes)
    }
    <div class="@(DefaultBlockName)__selectContainer">
        @Html.DropDownList(viewModel.Name, viewModel.SelectList, dropdownAttributes)
    </div>
</div>

@if (hasParent)
{
    <script>
        jQuery(function ($) {
            $("select[name='@(viewModel.Name)']").lombiq_ConnectedValueSelector({
                parentElementSelector: "@viewModel.ParentElementSelector",
                valueHierarchy: @Html.Raw(Json.Encode(viewModel.ParentElementValueHierarchy)),
                hasDefaultEmptyValue: @viewModel.HasDefaultEmptyValue.ToString().ToLower(),
                defaultEmptyValue: "@viewModel.DefaultEmptyValue"
            });
        });
    </script>
}