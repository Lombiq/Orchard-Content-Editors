@using Lombiq.ContentEditors.ViewModels

@{
    var viewModel = Model.ViewModel as DropdownEditorViewModel;

    const string DefaultBlockName = "dropdownEditor";
    string BlockName = viewModel.BlockName ?? DefaultBlockName;

    var dropdownAttributes = viewModel.BuildAttributes(new Dictionary<string, object>
    {
        { "class", "form-control dropdown " + DefaultBlockName + "__dropdown" }
    });

    var labelAttributes = new Dictionary<string, object>
    {
        { "class", "editorLabel " + DefaultBlockName + "__label" }
    };

    if (viewModel.Required)
    {
        dropdownAttributes["required"] = true;
        dropdownAttributes["class"] = dropdownAttributes["class"] + " required";
        labelAttributes["class"] = labelAttributes["class"] + " required";
    }

    if (viewModel.Disabled)
    {
        dropdownAttributes["disabled"] = "disabled";
    }

    if (!string.IsNullOrEmpty(viewModel.Placeholder))
    {
        dropdownAttributes["placeholder"] = viewModel.Placeholder;
    }

    if (viewModel.HasDefaultEmptyValue)
    {
        var emptySelectListItem = new SelectListItem
        {
            Text = viewModel.EmptyValueText,
            Value = "",
            Selected = !viewModel.SelectList?.Any(selectListItem => selectListItem.Selected) ?? false
        };
        viewModel.SelectList?.Insert(0, emptySelectListItem);
    }
}

<div class="editor editorField form-group @DefaultBlockName @BlockName">
    @if (!string.IsNullOrEmpty(viewModel.Label))
    {
        @Html.Label(viewModel.Label, labelAttributes)
    }

    @Html.DropDownList(viewModel.Name, viewModel.SelectList, dropdownAttributes)
</div>