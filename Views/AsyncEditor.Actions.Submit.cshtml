@using Orchard.ContentManagement
@using Orchard.Core.Contents.Settings
@using Lombiq.ContentEditors.Constants
@using Lombiq.ContentEditors.Models
@using Lombiq.ContentEditors.Services

@{
    var asyncEditorPart = (Model.ContentItem as ContentItem).AsAsyncEditorPart();

    if (!(asyncEditorPart?.IsAsyncEditorContext ?? false))
    {
        return;
    }

    var currentEditorGroupName = asyncEditorPart.CurrentEditorGroup?.Name ?? "";
}

<div class="@ElementNames.AsyncEditorSubmitActions.BlockName">
    <input type="submit" name="submit.Save" data-submitContext="Save" value="@T("Save Draft")"
           class="@ElementNames.AsyncEditorSubmitActions.ActionElementName @ElementNames.AsyncEditorSubmitActions.SaveActionElementName" />

    @if ((asyncEditorPart.CurrentEditorGroup?.IsPublishGroup ?? true) &&
        asyncEditorPart.TypeDefinition.Settings.GetModel<ContentTypeSettings>().Draftable &&
        WorkContext.Resolve<IAsyncEditorService>().IsAuthorizedToPublish(asyncEditorPart, currentEditorGroupName))
    {
        <input type="submit" name="submit.Publish" data-submitContext="Publish" value="@T("Publish")"
               class="@ElementNames.AsyncEditorSubmitActions.ActionElementName @ElementNames.AsyncEditorSubmitActions.PublishActionElementName" />
    }

    @if (asyncEditorPart.GetNextGroupDescriptor(currentEditorGroupName, true) != null)
    {
        <input type="submit" name="submit.SaveAndNext" data-submitContext="SaveAndNext" value="@T("Save and Next")"
               class="@ElementNames.AsyncEditorSubmitActions.ActionElementName @ElementNames.AsyncEditorSubmitActions.NextActionElementName" />
    }
</div>