@using Orchard.ContentManagement
@using Orchard.Core.Contents.Settings
@using Lombiq.ContentEditors.Models
@using Lombiq.ContentEditors.Services

@{
    var contentItem = Model.ContentItem as ContentItem;
    var asyncEditorPart = contentItem?.As<AsyncEditorPart>();

    if (!(asyncEditorPart?.IsAsyncEditorContext ?? false))
    {
        return;
    }

    var asyncEditorService = WorkContext.Resolve<IAsyncEditorService>();

    const string BlockName = "asyncEditorSubmitActions";
    const string ActionElementName = BlockName + "__action";
}

<div class="@BlockName">
    <input type="submit" name="submit.Save" data-submitContext="Save" class="@ActionElementName @(BlockName)__saveAction" value="@T("Save Draft")" />

    @if ((asyncEditorPart.CurrentEditorGroup?.IsPublishGroup ?? true) &&
        asyncEditorPart.TypeDefinition.Settings.GetModel<ContentTypeSettings>().Draftable &&
        asyncEditorService.IsAuthorizedToPublish(asyncEditorPart, asyncEditorPart.CurrentEditorGroup?.Name ?? ""))
    {
        <input type="submit" name="submit.Publish" data-submitContext="Publish" class="@ActionElementName @(BlockName)__publishAction" value="@T("Publish")" />
    }

    @if (asyncEditorPart.NextAuthorizedEditorGroup != null)
    {
        <input type="submit" name="submit.SaveAndNext" data-submitContext="SaveAndNext" class="@ActionElementName @(BlockName)__nextAction" value="@T("Save and Next")" />
    }
</div>