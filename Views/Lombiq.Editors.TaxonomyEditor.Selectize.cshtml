@using Lombiq.ContentEditors.ViewModels
@using Lombiq.ContentEditors.Constants
@using Orchard.Services

@{
    Script.Require(ResourceNames.Selectize).AtHead();
    Style.Require(ResourceNames.Selectize).AtHead();

    var viewModel = Model.ViewModel as TaxonomyEditorViewModel;

    if (!viewModel?.SelectList?.Any() ?? true) { return; }

    const string DefaultBlockName = "selectizeDropdownEditor";
    string BlockName = viewModel.BlockName ?? DefaultBlockName;
    const string TextBoxElementName = DefaultBlockName + "__textbox";
    string TechnicalNameModifier = string.IsNullOrEmpty(viewModel.TechnicalName) ? "" : "_" + viewModel.TechnicalName.Replace('.', '_');

    var inputIdPrefix = viewModel.Name.Replace('.', '_');
    var selectizeInputId = $"{inputIdPrefix}__SelectizeInput{TechnicalNameModifier}";
    var hiddenInputIdPrefix = $"{inputIdPrefix}_Terms";

    var selectizeInputAttributes = new Dictionary<string, object>
{
        { "class", TextBoxElementName },
        { "id", selectizeInputId },
        { "required", viewModel.Required.ToString() },
        { "placeholder", viewModel.Placeholder ?? "" }
    };

    var labelAttributes = new Dictionary<string, object>
{
        { "class", "editorLabel textboxEditor__label " + DefaultBlockName + "__label" },
        { "for", selectizeInputId }
    };

    if (viewModel.Required)
    {
        labelAttributes["class"] = labelAttributes["class"] + " required";
    }

    var jsonConverter = WorkContext.Resolve<IJsonConverter>();
    var selectedValues = viewModel.SelectList.Where(option => option.Selected).Select(option => option.Value);

    var options = new Dictionary<string, object>
    {
        { "maxItems", viewModel.TaxonomyFieldViewModel.Settings.SingleChoice ? "1" : null }
    };
}

<div class="editor editorField form-group @DefaultBlockName @BlockName">
    @if (!string.IsNullOrEmpty(viewModel.Label))
    {
        @Html.Label(viewModel.Label, labelAttributes)
    }

    @Html.TextBox("SelectizeInput", "", selectizeInputAttributes)

    <div hidden id="@(hiddenInputIdPrefix)_Ids">
        @for (int i = 0; i < viewModel.SelectList.Count; i++)
        {
            @Html.Hidden($"Terms[{i}].Id", viewModel.SelectList[i].Value, new { id = $"{hiddenInputIdPrefix}_{viewModel.SelectList[i].Value}_Id" })
        }
    </div>

    <div hidden id="@(hiddenInputIdPrefix)_IsCheckedStates">
        @for (int i = 0; i < viewModel.SelectList.Count; i++)
        {
            @Html.Hidden($"Terms[{i}].IsChecked", viewModel.SelectList[i].Selected, new { id = $"{hiddenInputIdPrefix}_{viewModel.SelectList[i].Value}_IsChecked" })
        }
    </div>

    <div hidden id="@(hiddenInputIdPrefix)_SpecialValues">
        @if (!string.IsNullOrEmpty(viewModel.NoneValueId))
        {
            <input type="hidden" id="@($"{hiddenInputIdPrefix}_NoneValue_Selected")" value="@selectedValues.Contains(viewModel.NoneValueId).ToString()" />
        }

        @if (!string.IsNullOrEmpty(viewModel.OtherValueId))
        {
            <input type="hidden" id="@($"{hiddenInputIdPrefix}_OtherValue_Selected")" value="@selectedValues.Contains(viewModel.OtherValueId).ToString()" />
        }
    </div>
</div>

<script type="text/javascript">
    ; (function ($) {
        $(function () {
            @* Initializing selectize on input field. *@
            var $selectizeElement = $("#@selectizeInputId")
                .selectize(JSON.parse(@Html.Raw(Json.Encode(jsonConverter.Serialize(options)))))[0]
                .selectize;

            var selectList = JSON.parse(@Html.Raw(Json.Encode(jsonConverter.Serialize(viewModel.SelectList))));
            for (var i = 0; i < selectList.length; i++) {
                $selectizeElement.addOption({ value: selectList[i].Value, text: selectList[i].Text });
            }

        @if (selectedValues.Any())
        {
            <text>
            var selectedValues = JSON.parse(@Html.Raw(Json.Encode(jsonConverter.Serialize(selectedValues))));
            for (var i = 0; i < selectedValues.length; i++) {
                $selectizeElement.addItem(selectedValues[i]);
            }
            </text>
        }

            $("#@selectizeInputId").change(function () {
                @* Setting each checked state to false. *@
                $.each($("#@(hiddenInputIdPrefix)_IsCheckedStates input"), function (index, element) {
                    $(element).val("False");
                });

                var valueString = $(this).val();
                var termIds = valueString.length > 0 ? valueString.split(",") : new Array();

                if (termIds.length > 0) {
                    for (var i = 0; i < termIds.length; i++) {
                        $("#@(hiddenInputIdPrefix)_" + termIds[i] + "_IsChecked").val("True");
                    }
                }

            @if (!string.IsNullOrEmpty(viewModel.NoneValueId))
            {
                <text>
                var noneValueSelectedElement = $("#@(hiddenInputIdPrefix)_NoneValue_Selected");
                noneValueSelectedElement.val(termIds.includes("@viewModel.NoneValueId"));
                noneValueSelectedElement.trigger("change");
                </text>
            }

            @if (!string.IsNullOrEmpty(viewModel.OtherValueId))
            {
                <text>
                var otherValueSelectedElement = $("#@(hiddenInputIdPrefix)_OtherValue_Selected");
                otherValueSelectedElement.val(termIds.includes("@viewModel.OtherValueId"));
                otherValueSelectedElement.trigger("change");
                </text>
            }
            });
        });
    })(jQuery);
</script>